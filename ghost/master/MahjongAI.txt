#===========================================================
# LICENSE: CC0 1.0 Universal
# http://creativecommons.org/publicdomain/zero/1.0/
#===========================================================
#===========================================================
# 何を切るか
#===========================================================
#テンパイに近づける
=kis
function MJ.Naniwokiru $(
	setstr @strTehai13 $@arg[1];
	setstr @strTsumo $@arg[2];
	setstr @strKawa $@arg[3];
	setstr @strBafuhai $@arg[4];
	setstr @strJifuhai $@arg[5];
	setstr @strDorahyouji $@arg[6];
	split @aryPlayerRichi $@arg[7] ,;
	split @aryPlayerGenbutsu $@arg[8] ,;
	setstr @strVisiblePai $@arg[9];

	split @arVisiblePai $(MJ.MakeArrayFromString ${@strVisiblePai}) ,;
	loop 34 $(
		adddictstr @arVisibleNum 0;
	);
	foreach @p @arVisiblePai $(
		inc @arVisibleNum[$(MJ.GetSortCode ${@p})];
	);

	setstr @strTehai14 $(MJ.AddHai ${@strTehai13} ${@strTsumo});
	split @arSutehaiKouho $(MJ.Uniq $(MJ.GetTehaiArrayWithoutFuro ${@strTehai14})) ,;
	#ドラ
	split @arDorahyouji $(MJ.MakeArrayFromString ${@strDorahyouji}) ,;
	foreach @d @arDorahyouji $(
		adddictstr @arDora $(MJ.GetDoraFromDorahyouji ${@d});
	);
	setstr @strDora $(join @arDora "");
	#孤立牌
	split @arKoritsuhai $(MJ.GetKoritsuHaiArray ${@strTehai14}) ,;

	setstr @point -1;
	foreach @sutehai @arSutehaiKouho $(
		setstr @strTehaiRemoved $(MJ.RemoveHai ${@strTehai14} ${@sutehai});
		setstr @shanten $(MJ.GetShantenYaku ${@strTehaiRemoved} ${@strBafuhai} ${@strJifuhai});
		setstr @shantenPoint $[ 10000 * (10 - ${@shanten}) ];
		setstr @machiPoint 0;
		setstr @elementMaxPoint 0;
		#テンパイ時は待ちの広さ・和了点の高さを考慮
		if $[ ${@shanten} == 0 ] $(
			clear @arMachi;
			split @arMachi $(MJ.GetMachiArray ${@strTehaiRemoved}) ,;
			foreach @machi @arMachi $(
				#ツモった場合を想定
				setstr @isTsumo 1;
				setstr @score $(MJ.GetScore ${@strTehaiRemoved} ${@machi} ${@strBafuhai} ${@strJifuhai} ${@strDora} ${@isTsumo});
				if $[ ${@score} > 0 ] $(
					setstr @nNokori $[ 4 - $@arVisibleNum[$(MJ.GetSortCode ${@machi})] ];
					inc @machiPoint $[ ${@score} * ${@nNokori} ];
				);
			);
		) else $(
			clear @arMentsuPattern;
			split @arMentsuPattern $(MJ.GetMentsuPattern ${@strTehaiRemoved}) |;
			foreach @strMentsu @arMentsuPattern $(
				setstr @elementPoint 0;
				if $[ ${@strMentsu} == "chitoitsu" || ${@strMentsu} == "kokushimusou"] $(
					setstr @elementPoint 0;
				) else $(
					clear @ap;
					split @ap ${@strMentsu} ,;
					clear @arTatsu;
					foreach @p @ap $(
						if $[ $(length ${@p}) == 6 ] $(
							#面子
							inc @elementPoint 90;
						) else if $[ $(length ${@p}) == 4 ] $(
							#塔子・対子
							adddictstr @arTatsu ${@p};
						);
					);
					foreach @tatsu @arTatsu $(
						setstr @t1 $(substr ${@tatsu} 0 1);
						setstr @t2 $(substr ${@tatsu} 2 1);
						setstr @color $(substr ${@tatsu} 1 1);
						if $[ (${@t1} != 1) && (${@t1} + 1 == ${@t2}) && (${@t2} != 9) ] $(
							#両面
							setstr @nNokori1 $[ 4 - $@arVisibleNum[$(MJ.GetSortCode $[ ${@t1} - 1 ]${@color})] ];
							setstr @nNokori2 $[ 4 - $@arVisibleNum[$(MJ.GetSortCode $[ ${@t2} + 1 ]${@color})] ];
							inc @elementPoint $[ 10 * (${@nNokori1} + ${@nNokori2}) ];
						) else if $[ ${@t1} == ${@t2} ] $(
							#対子
							setstr @nNokori $[ 4 - $@arVisibleNum[$(MJ.GetSortCode ${@t1}${@color})] ];
							inc @elementPoint $[ 20 * ${@nNokori} ];
						) else if $[ ${@t1} == 1 && ${@t2} == 2 || ${@t1} == 8 && ${@t2} == 9 ] $(
							#辺張
							setstr @nNokori 0;
							if $[ ${@t1} == 1 ] $(
								setstr @nNokori $[ 4 - $@arVisibleNum[$(MJ.GetSortCode 3${@color})] ];
							) else $(
								setstr @nNokori $[ 4 - $@arVisibleNum[$(MJ.GetSortCode 7${@color})] ];
							);
							inc @elementPoint $[ 10 * ${@nNokori} - 5 ];
						) else $(
							#嵌張
							setstr @nNokori $[ 4 - $@arVisibleNum[$(MJ.GetSortCode $[ ${@t1} + 1 ]${@color})] ];
							inc @elementPoint $[ 10 * ${@nNokori} ];
						);
					);
				);
				if $[ ${@elementMaxPoint} < ${@elementPoint} ] $(
					setstr @elementMaxPoint ${@elementPoint};
				);
			);
		);
		#孤立牌を優先的に切る
		setstr @koritsuPoint 0;
		if $[ $(find @arKoritsuhai ${@sutehai}) >= 0 ] $(
			inc @koritsuPoint 500;
		);
		#既に捨てた牌を優先的に切る
		setstr @furitenPoint 0;
		if $[ $(match ${@strKawa} ${@sutehai}) >= 0 ] $(
			inc @furitenPoint 10;
		);
		#ドラは残しておきたい
		setstr @doraPoint 0;
		if $[ $(find @arDora ${@sutehai}) >= 0 ] $(
			dec @doraPoint 50;
		);
		#現物を優先的に切る
		setstr @genbutsuPoint 0;
		setstr @i 0;
		while $[ $@aryPlayerRichi[${@i}] != "" ] $(
			if $@aryPlayerRichi[${@i}] $(
				if $[ $(match @aryPlayerGenbutsu[${@i}] ${@sutehai}) >= 0 ] $(
					inc @genbutsuPoint 2000;
					#親のリーチは特に避けたい
					if $[ ${@i} == 0 ] $(
						inc @genbutsuPoint 1000;
					);
				);
			);
			inc @i;
		);
		setstr @dahaiPoint $[ ${@shantenPoint} + ${@machiPoint} + ${@elementMaxPoint} + ${@koritsuPoint} + ${@furitenPoint} + ${@doraPoint} + ${@genbutsuPoint} ];
		if $[ ${@point} < ${@dahaiPoint} ] $(
			setstr @point ${@dahaiPoint};
			clear @arDahai;
			adddictstr @arDahai ${@sutehai};
		) else if $[ ${@point} == ${@dahaiPoint} ] $(
			adddictstr @arDahai ${@sutehai};
		);
	);
	return $(entry @arDahai);
);

#手牌から副露を除去
function MJ.GetTehaiArrayWithoutFuro $(
	setstr @strTehai $@arg[1];
	setstr @i 0;
	while $[ $(substr ${@strTehai} ${@i} 2) != "" ] $(
		setstr @s1 $(substr ${@strTehai} ${@i} 1);
		if $[ ${@s1} == "<" || ${@s1} == "(" ] $(
			return $(join @r ,);
		);
		adddictstr @r $(substr ${@strTehai} ${@i} 2);
		inc @i 2;
	);
	return $(join @r ,);
);

#配列から重複する要素を除く
function MJ.Uniq $(
	split @ary $@arg[1] ,;
	setstr @i 0;
	while $[ $@ary[${@i}] != "" ] $(
		if $[ $(find @r $@ary[${@i}]) == -1 ] $(
			adddictstr @r $@ary[${@i}];
		);
		inc @i;
	);
	return $(join @r ,);
);

#孤立牌の探索
function MJ.GetKoritsuHaiArray $(
	split @hai $(MJ.GetTehaiArrayWithoutFuro $@arg[1]) ,;
	setstr @strTehai $(join @hai "");
	setstr @i 0;
	while $[ $@hai[${@i}] != "" ] $(
		setstr @num $(substr $@hai[${@i}] 0 1);
		setstr @color $(substr $@hai[${@i}] 1 1);
		setstr @rem $(sub ${@strTehai} $@hai[${@i}] "");
		if $[ ${@color} == "m" || ${@color} == "p" || ${@color} == "s" ] $(
			setstr @haiP2 $[ ${@num} - 2 ]${@color};
			setstr @haiP1 $[ ${@num} - 1 ]${@color};
			setstr @haiN1 $[ ${@num} + 1 ]${@color};
			setstr @haiN2 $[ ${@num} + 2 ]${@color};
			if $[ !( $(match ${@strTehai} ${@haiP2}) >= 0
				|| $(match ${@strTehai} ${@haiP1}) >= 0
				|| $(match ${@rem} $@hai[${@i}]) >= 0
				|| $(match ${@strTehai} ${@haiN1}) >= 0
				|| $(match ${@strTehai} ${@haiN2}) >= 0
				) ] $(
				adddictstr @r $@hai[${@i}];
			);
		) else if $[ ${@color} == "z" ] $(
			if $[ $(match ${@rem} $@hai[${@i}]) == -1 ] $(
				adddictstr @r $@hai[${@i}];
			);
		);
		inc @i;
	);
	return $(join @r ,);
);

#牌を追加
function MJ.AddHai $(
	setstr @strHai1 $@arg[1];
	setstr @strHai2 $@arg[2];
	split @arHai2 $(MJ.MakeArrayFromString ${@strHai2}) ,;
	setstr @strToAdd ${@strHai1};
	setstr @i 0;
	while $[ $@arHai2[${@i}] != "" ] $(
		setstr @strAdded "";
		setstr @isAdded 0;
		setstr @j 0;
		while $[ ${@j} < $(length ${@strToAdd}) ] $(
			setstr @s1 $(substr ${@strToAdd} ${@j} 1);
			if $[ ${@s1} == "<" ] $(
				if $[ !${@isAdded} ] $(
					setstr @isAdded 1;
					setstr @s $(MJ.SortHai $(MJ.MakeArrayFromString ${@strAdded}$@arHai2[${@i}]));
					setstr @strAdded $(gsub ${@s} , "");
				);
				if $[ $(substr ${@strToAdd} $[ ${@j} + 7 ] 1) == ">" ] $(
					setstr @strAdded ${@strAdded}$(substr ${@strToAdd} ${@j} 8);
					inc @j 7;
				) else if $[ $(substr ${@strToAdd} $[ ${@j} + 9 ] 1) == ">" ] $(
					setstr @strAdded ${@strAdded}$(substr ${@strToAdd} ${@j} 10);
					inc @j 9;
				);
			) else if $[ ${@s1} == "(" ] $(
				if $[ !${@isAdded} ] $(
					setstr @isAdded 1;
					setstr @s $(MJ.SortHai $(MJ.MakeArrayFromString ${@strAdded}$@arHai2[${@i}]));
					setstr @strAdded $(gsub ${@s} , "");
				);
				if $[ $(substr ${@strToAdd} $[ ${@j} + 9 ] 1) == ")" ] $(
					setstr @strAdded ${@strAdded}$(substr ${@strToAdd} ${@j} 10);
					inc @j 9;
				);				
			) else $(
				setstr @strAdded ${@strAdded}$(substr ${@strToAdd} ${@j} 2);
				inc @j;
			);
			inc @j;
		);
		if $[ !${@isAdded} ] $(
			setstr @strAdded $(gsub $(MJ.SortHai $(MJ.MakeArrayFromString ${@strAdded}$@arHai2[${@i}])) , "");
		);
		setstr @strToAdd ${@strAdded};
		inc @i;
	);
	return ${@strToAdd};
);

#牌を除去
function MJ.RemoveHai $(
	setstr @strHai1 $@arg[1];
	setstr @strHai2 $@arg[2];
	split @arHai2 $(MJ.MakeArrayFromString ${@strHai2}) ,;
	setstr @strToRemove ${@strHai1};
	setstr @i 0;
	while $[ $@arHai2[${@i}] != "" ] $(
		setstr @strRemoved "";
		setstr @isRemoved 0;
		setstr @j 0;
		while $[ ${@j} < $(length ${@strToRemove}) ] $(
			setstr @s1 $(substr ${@strToRemove} ${@j} 1);
			if $[ ${@s1} == "<" ] $(
				if $[ $(substr ${@strToRemove} $[ ${@j} + 7 ] 1) == ">" ] $(
					setstr @strRemoved ${@strRemoved}$(substr ${@strToRemove} ${@j} 8);
					inc @j 7;
				) else if $[ $(substr ${@strToRemove} $[ ${@j} + 9 ] 1) == ">" ] $(
					setstr @strRemoved ${@strRemoved}$(substr ${@strToRemove} ${@j} 10);
					inc @j 9;
				);
			) else if $[ ${@s1} == "(" ] $(
				if $[ $(substr ${@strToRemove} $[ ${@j} + 9 ] 1) == ")" ] $(
					setstr @strRemoved ${@strRemoved}$(substr ${@strToRemove} ${@j} 10);
					inc @j 9;
				);
			) else $(
				if $[ !${@isRemoved} && ($(substr ${@strToRemove} ${@j} 2) == $@arHai2[${@i}]) ] $(
					setstr @isRemoved 1;
				) else $(
					setstr @strRemoved ${@strRemoved}$(substr ${@strToRemove} ${@j} 2);
				);
				inc @j;
			);
			inc @j;
		);
		setstr @strToRemove ${@strRemoved};
		inc @i;
	);
	return ${@strToRemove};
);

#"1m2m3m" -> "1m,2m,3m"変換
function MJ.MakeArrayFromString $(
	setstr @s $@arg[1];
	setstr @i 0;
	while 1 $(
		setstr @e $(substr ${@s} ${@i} 2);
		if $[ ${@e} == "" ] $(
			break;
		);
		adddictstr @r ${@e};
		inc @i 2;
	);
	return $(join @r ,);
);

#ソート
function MJ.SortHai $(
	split @a $@arg[1] ,;
	#バブルソートでいいや…
	while $[ $(size @a) > 0 ] $(
		setstr @n $(size @a);
		setstr @index -1;
		setstr @minValue 99;
		clear @an;
		setstr @i 0;
		while $[ ${@i} < ${@n} ] $(
			setstr @v $(
				MJ.GetSortCode $@a[${@i}];
			);
			if $[ ${@v} < ${@minValue} ] $(
				if $[ ${@index} >= 0 ] $(
					adddictstr @an $@a[${@index}];
				);
				setstr @index ${@i};
				setstr @minValue ${@v};
			) else $(
				adddictstr @an $@a[${@i}];
			);
			inc @i;
		);
		adddictstr @r $@a[${@index}];
		clear @a;
		copy @an @a;
	);
	return $(join @r ,);
);

#ドラ表示牌からドラを求める
function MJ.GetDoraFromDorahyouji $(
	setstr @hai $@arg[1];
	setstr @num $(substr ${@hai} 0 1);
	setstr @color $(substr ${@hai} 1 1);
	if $[ ${@color} == "m" || ${@color} == "p" || ${@color} == "s" ] $(
		setstr @n $[ ${@num} % 9 + 1 ];
		return ${@n}${@color};
	) else if $[ 1 <= ${@num} && ${@num} <= 4 ] $(
		setstr @n $[ ${@num} % 4 + 1 ];
		return ${@n}${@color};
	) else if $[ ${@num} == 7 ] $(
		return 5z;
	) else $(
		setstr @n $[ ${@num} + 1 ];
		return ${@n}${@color};
	);
);

#ソート順定義
function MJ.GetSortCode $(
	setstr @s $@arg[1];
	split @a "1m,2m,3m,4m,5m,6m,7m,8m,9m,1p,2p,3p,4p,5p,6p,7p,8p,9p,1s,2s,3s,4s,5s,6s,7s,8s,9s,1z,2z,3z,4z,5z,6z,7z" ",";
	setstr @r $(find @a ${@s});
	return ${@r};
);

#===========================================================
# 副露判断
#===========================================================
#カン大好き設定 シャンテン数が上がらない限りカンする
function MJ.GetAnkanHaiBest $(
	setstr @tehai $@arg[1];
	setstr @tsumoHai $@arg[2];
	setstr @isRichi $@arg[3];
	setstr @bafuHai $@arg[4];
	setstr @jifuHai $@arg[5];
	setstr @nokori $@arg[6];
#	split @aryPlayerRichi $@arg[7] ,;
	if $[ !$(MJ.CanAnkan ${@tehai} ${@tsumoHai} ${@isRichi} ${@nokori}) ] $(
		return "";
	);
	if ${@isRichi} $(
		return ${@tsumoHai};
	);
	setstr @tehaiAdd $(MJ.AddHai ${@tehai} ${@tsumoHai});
	split @arAnkanHai $(MJ.GetAnkanHai ${@tehaiAdd}) ,;
	setstr @shantenBefore $(MJ.GetShantenYaku ${@tehai} ${@bafuHai} ${@jifuHai});
	foreach @h @arAnkanHai $(
		setstr @strTehai $(MJ.RemoveHai ${@tehaiAdd} ${@h}${@h}${@h}${@h})"("${@h}${@h}${@h}${@h}")";
		setstr @shantenAfter $(MJ.GetShantenYaku ${@strTehai} ${@bafuHai} ${@jifuHai});
		if $[ ${@shantenAfter} != "" && ${@shantenAfter} <= ${@shantenBefore} ] $(
			adddictstr @arAnkanHaiUseful ${@h};
		);
	);
	return $(entry @arAnkanHaiUseful);
);

#本当は5回目の槓の場合を考慮しないといけない
function MJ.CanAnkan $(
	setstr @tehai $@arg[1];
	setstr @tsumoHai $@arg[2];
	setstr @isRichi $@arg[3];
	setstr @nokori $@arg[4];
	if $[ ${@nokori} == 0 ] $(
		return 0;
	);
	setstr @tehaiAdd $(MJ.AddHai ${@tehai} ${@tsumoHai});
	split @arAnkanHai $(MJ.GetAnkanHai ${@tehaiAdd}) ,;
	if $[ $(size @arAnkanHai) == 0 ] $(
		return 0;
	);
	#リーチ後の場合
	if ${@isRichi} $(
		#送りカンの場合
		if $[ $(find @arAnkanHai ${@tsumoHai}) == -1 ] $(
			return 0;
		);
		#和了の形が変わる場合
		split @arMentsuPattern $(MJ.GetMentsuPattern ${@tehai}) |;
		foreach @m @arMentsuPattern $(
			clear @ap;
			split @ap ${@m} ,;
			#常に暗刻でないとダメ
			if $[ $(find @ap ${@tsumoHai}${@tsumoHai}${@tsumoHai}) == -1 ] $(
				return 0;
			);
		);
	);
	return 1;
);

function MJ.GetAnkanHai $(
	setstr @tehai $@arg[1];
	split @arHai $(MJ.GetTehaiArrayWithoutFuro ${@tehai}) ,;
	split @arHaiUniq $(MJ.Uniq $(join @arHai ,)) ,;
	foreach @h @arHaiUniq $(
		if $[ $(MJ.Count $(join @arHai ,) ${@h}) >= 4 ] $(
			adddictstr @r ${@h};
		);
	);
	return $(join @r ,);
);

function MJ.Count $(
	split @a $@arg[1] ,;
	setstr @s $@arg[2];
	setstr @n 0;
	foreach @e @a $(
		if $[ ${@e} == ${@s} ] $(
			inc @n;
		);
	);
	return ${@n};
);

#カン大好き設定 シャンテン数が上がらない限りカンする
function MJ.GetKakanHaiBest $(
	setstr @tehai $@arg[1];
	setstr @tsumoHai $@arg[2];
	setstr @bafuHai $@arg[3];
	setstr @jifuHai $@arg[4];
	setstr @nokori $@arg[5];
#	split @aryPlayerRichi $@arg[6] ,;
	if $[ !$(MJ.CanKakan ${@tehai} ${@tsumoHai} ${@nokori}) ] $(
		return "";
	);
	setstr @tehaiAdd $(MJ.AddHai ${@tehai} ${@tsumoHai});
	split @arKakanHai $(MJ.GetKakanHai ${@tehaiAdd}) ,;
	setstr @shantenBefore $(MJ.GetShantenYaku ${@tehai} ${@bafuHai} ${@jifuHai});
	foreach @h @arKakanHai $(
		setstr @strTehai $(sub ${@tehaiAdd} <${@h}${@h}${@h}> <${@h}${@h}${@h}${@h}>);
		setstr @strTehai $(MJ.RemoveHai ${@strTehai} ${@h});
		setstr @shantenAfter $(MJ.GetShantenYaku ${@strTehai} ${@bafuHai} ${@jifuHai});
		if $[ ${@shantenAfter} != "" && ${@shantenAfter} <= ${@shantenBefore} ] $(
			adddictstr @arKakanHaiUseful ${@h};
		);
	);
	return $(entry @arKakanHaiUseful);
);

#本当は5回目の槓の場合を考慮しないといけない
function MJ.CanKakan $(
	setstr @tehai $@arg[1];
	setstr @tsumoHai $@arg[2];
	setstr @nokori $@arg[3];
	if $[ ${@nokori} == 0 ] $(
		return 0;
	);
	setstr @tehaiAdd $(MJ.AddHai ${@tehai} ${@tsumoHai});
	split @arKakanHai $(MJ.GetKakanHai ${@tehaiAdd}) ,;
	if $[ $(size @arKakanHai) == 0 ] $(
		return 0;
	);
	return 1;
);

function MJ.GetKakanHai $(
	setstr @tehai $@arg[1];
	split @arHai $(MJ.GetTehaiArrayWithoutFuro ${@tehai}) ,;
	split @arHaiUniq $(MJ.Uniq $(join @arHai ,)) ,;
	foreach @h @arHaiUniq $(
		if $[ $(match ${@tehai} <${@h}${@h}${@h}>) >= 0 ] $(
			adddictstr @r ${@h};
		);
	);
	return $(join @r ,);
);

function MJ.ShouldRichi $(
	setstr @tehai $@arg[1];
	setstr @shanten $@arg[2];
	setstr @isRichi $@arg[3];
	setstr @nokori $@arg[4];
#	setstr @tsumo $@arg[5];
#	setstr @dahai $@arg[6];
#	setstr @strBafuhai $@arg[7];
#	setstr @strJifuhai $@arg[8];
#	setstr @strDorahyouji $@arg[9];
	if $[ !$(MJ.CanRichi ${@tehai} ${@shanten} ${@isRichi} ${@nokori}) ] $(
		return 0;
	);
	#テンパイ即リー
	return 1;
);

function MJ.CanRichi $(
	setstr @tehai $@arg[1];
	setstr @shanten $@arg[2];
	setstr @isRichi $@arg[3];
	setstr @nokori $@arg[4];
	if $[ $(match ${@tehai} <) == -1 && ${@shanten} == 0 && !${@isRichi} && ${@nokori} >= 4 ] $(
		return 1;
	);
	return 0;
);

#カン大好き設定 シャンテン数が上がらない限りカンする
function MJ.ShouldDaiminkan $(
	setstr @tehai $@arg[1];
	setstr @sutehai $@arg[2];
	setstr @bafuHai $@arg[3];
	setstr @jifuHai $@arg[4];
#	split @aryPlayerRichi $@arg[5] ,;
	setstr @h ${@sutehai};
	setstr @tehaiNew $(MJ.RemoveHai ${@tehai} ${@h}${@h}${@h})<${@h}${@h}${@h}${@h}>;
	setstr @shantenBefore $(MJ.GetShantenYaku ${@tehai} ${@bafuHai} ${@jifuHai});
	setstr @shantenAfter $(MJ.GetShantenYaku ${@tehaiNew} ${@bafuHai} ${@jifuHai});
	if $[ ${@shantenAfter} != "" && ${@shantenAfter} <= ${@shantenBefore} ] $(
		return 1;
	);
	return 0;
);

function MJ.ShouldPon $(
	setstr @tehai $@arg[1];
	setstr @sutehai $@arg[2];
	setstr @bafuHai $@arg[3];
	setstr @jifuHai $@arg[4];
#	split @aryPlayerRichi $@arg[5] ,;
	setstr @h ${@sutehai};
	setstr @tehaiNew $(MJ.RemoveHai ${@tehai} ${@h}${@h})<${@h}${@h}${@h}>;
	setstr @shantenBefore $(MJ.GetShantenYaku ${@tehai} ${@bafuHai} ${@jifuHai});
	setstr @shantenAfter $(MJ.GetShantenYaku ${@tehaiNew} ${@bafuHai} ${@jifuHai});
	if $[ ${@shantenAfter} != "" && ${@shantenAfter} < ${@shantenBefore} ] $(
		return 1;
	);
	return 0;
);

function MJ.GetChiMaterialBest $(
	setstr @tehai $@arg[1];
	setstr @sutehai $@arg[2];
	setstr @bafuHai $@arg[3];
	setstr @jifuHai $@arg[4];
#	split @aryPlayerRichi $@arg[5] ,;
	split @arChi $(MJ.GetChiMaterial ${@tehai} ${@sutehai}) ,;
	setstr @shantenBefore $(MJ.GetShantenYaku ${@tehai} ${@bafuHai} ${@jifuHai});
	foreach @c @arChi $(
		setstr @tehaiNew $(MJ.RemoveHai ${@tehai} ${@c})<$(gsub $(MJ.SortHai $(MJ.MakeArrayFromString ${@c}${@sutehai})) , "")>;
		setstr @shantenAfter $(MJ.GetShantenYaku ${@tehaiNew} ${@bafuHai} ${@jifuHai});
		if $[ ${@shantenAfter} != "" && ${@shantenAfter} < ${@shantenBefore} ] $(
			adddictstr @r ${@c};
		);
	);
	return $(entry @r);
);

function MJ.GetChiMaterial $(
	setstr @strTehai $@arg[1];
	setstr @sutehai $@arg[2];
	clear @r;
	setstr @n $(substr ${@sutehai} 0 1);
	setstr @color $(substr ${@sutehai} 1 1);
	if $[ ${@color} == "z" ] $(
		return ${@r};
	);
	split @arTehai $(MJ.GetTehaiArrayWithoutFuro ${@strTehai}) ,;
	clear @a;
	foreach @hai @arTehai $(
		if $[ $(substr ${@hai} 1 1) == ${@color} ] $(
			adddictstr @a $(substr ${@hai} 0 1);
		);
	);
	if $[ $(find @a $[ ${@n} - 2 ]) >= 0 && $(find @a $[ ${@n} - 1 ]) >= 0 ] $(
		adddictstr @r $[ ${@n} - 2 ]${@color}$[ ${@n} - 1 ]${@color};
	);
	if $[ $(find @a $[ ${@n} - 1 ]) >= 0 && $(find @a $[ ${@n} + 1 ]) >= 0 ] $(
		adddictstr @r $[ ${@n} - 1 ]${@color}$[ ${@n} + 1 ]${@color};
	);
	if $[ $(find @a $[ ${@n} + 1 ]) >= 0 && $(find @a $[ ${@n} + 2 ]) >= 0 ] $(
		adddictstr @r $[ ${@n} + 1 ]${@color}$[ ${@n} + 2 ]${@color};
	);
	return $(join @r ,);
);

function MJ.ShouldSayTenpai $(
	setstr @bafuHai $@arg[1];
	setstr @jifuHai $@arg[2];
	setstr @kyoku $@arg[3];
	setstr @isRichi $@arg[4];
	setstr @lead $@arg[5];
	#オーラスで東家で未リーチで現在1位で2位との差が4000点より多いならノーテン宣言する
	if $[ ${@bafuhai} != "2z" || ${@jifuhai} != "1z" || ${@kyoku} != 4 || ${@isRichi} || ${@lead} <= 4000 ] $(
		return 1;
	);
	return 0;
);

#===========================================================
# SAORIを使用する関数
#===========================================================
#役のあるシャンテン数を求める
function MJ.GetShantenYaku $(
	setstr @strTehai $@arg[1];
	setstr @strBafuhai $@arg[2];
	setstr @strJifuhai $@arg[3];
	setstr @r $(callsaori mj shanten_yaku ${@strTehai} ${@strBafuhai} ${@strJifuhai});
	return ${@r};
);

#手牌の形のパターンを求める(戻り値の区切り文字に注意)
function MJ.GetMentsuPattern $(
	setstr @strTehai $@arg[1];
	setstr @res $(callsaorix mj @res shanten ${@strTehai});
	setstr @i 0;
	while $[ ${@res.Value${@i}} != "" ] $(
		adddictstr @r ${@res.Value${@i}};
		inc @i;
	);
	return $(join @r |);
);

#待ちを求める
function MJ.GetMachiArray $(
	setstr @strTehai $@arg[1];
	setstr @res $(callsaori mj machi ${@strTehai});
	setstr @r $(MJ.MakeArrayFromString ${@res});
	return $(join @r ,);
);

#和了点を求める
function MJ.GetScore $(
	setstr @strTehai $@arg[1];
	setstr @strAtarihai $@arg[2];
	setstr @strBafuhai $@arg[3];
	setstr @strJifuhai $@arg[4];
	setstr @strDora $@arg[5];
	setstr @isTsumo $@arg[6];
	setstr @isRichi 0;
	setstr @isIppatsu 0;
	setstr @isChankan 0;
	setstr @isRinshan 0;
	setstr @isFinalTileWin 0;
	setstr @is1stRound 0;
	setstr @r $(callsaori mj score
		${@strTehai} ${@strAtarihai} ${@strBafuhai} ${@strJifuhai} ${@strDora}
		${@isTsumo} ${@isRichi} ${@isIppatsu} ${@isChankan} ${@isRinshan}
		${@isFinalTileWin} ${@is1stRound});
	return ${@r};
);
=end
