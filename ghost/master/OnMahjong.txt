#===========================================================
# LICENSE: CC0 1.0 Universal
# http://creativecommons.org/publicdomain/zero/1.0/
#===========================================================

#===========================================================
# 設定
#===========================================================
# バージョン
MJ.Version: UKAJONG/0.2

# 返答時のイベント名
MJ.ResponseEventID: OnMahjongResponse

#イベントログをだらだら見るモード
MJ.ShowAllLogMode: 0

# 自分の名前(sakura.name)
MJ.PlayerName: チュンチュン

#===========================================================
# ID: OnMahjong
# Reference0: バージョン(UKAJONG/0.2)
# Reference1: サーバコマンド(gamestart|gameend|...)
# Reference2以降: サーバコマンド追加情報
#===========================================================
OnMahjong: $(
	if ${MJ.ShowAllLogMode} $(
		entry MJ.ShowAllLog;
	) else if $[ ${System.Request.Reference0} == ${MJ.Version} ] $(
		entry MJ.Main;
	) else $(
		echo "";
	);
)

#===========================================================
# イベントログ垂れ流し
#===========================================================
MJ.ShowAllLog: $(
	setstr @res "ID: OnMahjong\n";
	setstr @i 0;
	while $[ ${System.Request.Reference${@i}} != "" ] $(
		setstr @res ${@res}Reference${@i}:" "${System.Request.Reference${@i}}\n;
		inc @i;
	);
	setstr @res "\C\0\b[2]\s[0]\n\_q"${@res}$(entry MJ.Main);
	entry @res;
)

#===========================================================
# メイン処理
#===========================================================
MJ.Main: $(
	entry MJ.${System.Request.Reference1};
)

#===========================================================
# hello 接続確認
#===========================================================
MJ.hello: $(
	MJ.SendResponse ${System.Request.Reference1} ump=${MJ.ump_version} name=${MJ.PlayerName};
)
MJ.ump_version: ?

#===========================================================
# gamestart ゲーム(半荘)開始
# Reference2: 席(東|南|西|北)
# Reference3: プレイヤー名1
# Reference4: プレイヤー名2
# Reference5: プレイヤー名3
# Reference6: プレイヤー名4
#===========================================================
MJ.gamestart: $(
	setstr @i 3;
	while $[ ${System.Request.Reference${@i}} != "" ] $(
		adddictstr MJ.Save.PlayerName ${System.Request.Reference${@i}};
		adddictstr MJ.Save.Player.Score 0;
		inc @i;
	);
	entry MJ.gamestart.talk;
)
MJ.gamestart.talk: \0\s[0]いくよー。\e
MJ.gamestart.talk: \0\s[5]お手柔らかに。\e

#===========================================================
# gameend ゲーム終了
# Reference2: プレイヤー名1[0x01]点数
# Reference3: プレイヤー名2[0x01]点数
# Reference4: プレイヤー名3[0x01]点数
# Reference5: プレイヤー名4[0x01]点数
#===========================================================
MJ.gameend: $(
	setstr @i 2;
	while $[ ${System.Request.Reference${@i}} != "" ] $(
		clear @a;
		split @a ${System.Request.Reference${@i}} $(chr 1);
		setstr @playerName $@a[0];
		setstr @score $@a[1];
		setstr MJ.Save.Player.Score[$(MJ.B ${@playerName})] ${@score};
		inc @i;
	);
	if $[ $(MJ.GetLeadPoint) > 0] $(
		entry MJ.gameend.talk.top;
	) else $(
		entry MJ.gameend.talk.normal;
	);
	clear MJ.Save.PlayerName;
	clear MJ.Save.Player.Score;
)
MJ.gameend.talk.top: \0\s[5]いっちばーん！\e
MJ.gameend.talk.top: \0\s[1]%selfname、\_w[500]勝っちゃった？\e
MJ.gameend.talk.normal: \0\s[0]楽しかったね。\e
MJ.gameend.talk.normal: \0\s[0]また遊んでね。\e

#===========================================================
# kyokustart 一局が始まるときに送る
# Reference2: 場風(東|南|西|北)
# Reference3: 親(ex.プレイヤー名1)
# Reference4: 本場(ex.1)
# Reference5: 供託(ex.1000)
#===========================================================
MJ.kyokustart: ${MJ.kyokuinit}$(
	setstr MJ.Save.Richi 0;
	setstr MJ.Save.Bafuhai $(MJ.GetBafuhai ${System.Request.Reference2});
	setstr MJ.Save.Jifuhai $(MJ.GetJifuhai ${System.Request.Reference3});
	setstr MJ.Save.Kyoku $[ $(find MJ.Save.PlayerName ${System.Request.Reference3}) + 1 ];
	split MJ.Save.Players $(MJ.GetPlayers ${System.Request.Reference3}) ,;
	loop 4 $(
		adddictstr MJ.Save.Player.Kawa dummy;
		adddictstr MJ.Save.Player.Richi 0;
		adddictstr MJ.Save.Player.Genbutsu dummy;
	);
	setstr MJ.Save.IsIppatsuChance 0;
	entry MJ.kyokustart.talk;
)
MJ.kyokustart.talk: \0\s[0]\e

MJ.kyokuinit: $(
	clear MJ.Save.Status;
	clear MJ.Save.Tehai;
	clear MJ.Save.Tsumo;
	clear MJ.Save.Kawa;
	clear MJ.Save.Richi;
	clear MJ.Save.Dorahyouji;
	clear MJ.Save.Uradorahyouji;
	clear MJ.Save.Bafuhai;
	clear MJ.Save.Jifuhai;
	clear MJ.Save.Kyoku;
	clear MJ.Save.Furo.Own;
	clear MJ.Save.Furo.Other;
	clear MJ.Save.Sutehai;
	clear MJ.Save.Players;
	clear MJ.Save.Player.Kawa;
	clear MJ.Save.Player.Richi;
	clear MJ.Save.Player.Genbutsu;
	clear MJ.Save.VisiblePai;
	clear MJ.Save.Say.Own;
	clear MJ.Save.IsIppatsuChance;
)

#===========================================================
# kyokuend 一局終了
#===========================================================
MJ.kyokuend: ${MJ.kyokuinit}$(
	if $[ $(match ${System.Request.Status} talking) < 0 ] $(
		entry MJ.kyokuend.talk;
	);
)
MJ.kyokuend.talk: \0\s[0]\e

#===========================================================
# point プレイヤーの点数を通知する
# Reference2: プレイヤー名
# Reference3: (=|+|-) =は点数の直指定、+-は増減を意味する
# Reference4: 点数
#===========================================================
MJ.point: $(
	if $[ ${System.Request.Reference3} == "=" ] $(
		setstr MJ.Save.Player.Score[$(MJ.B ${System.Request.Reference2})] ${System.Request.Reference4};
		#増減のみに反応
	) else if $[ ${System.Request.Reference2} != ${MJ.PlayerName} ] $(
		#自分の点数通知のみに反応
	) else if $[ ${MJ.Save.Status} == "流局" ] $(
		#流局では一々喋らない
	) else if $[ ${System.Request.Reference3} == "+" ] $(
		if ${MJ.isYakuman} $(
			entry MJ.point.plus.isYakuman;
		) else if ${MJ.hasUradora} $(
			entry MJ.point.plus.hasUradora;
		) else if $[ 8000 <= ${System.Request.Reference4} ] $(
			entry MJ.point.plus.large;
		) else $(
			entry MJ.point.plus.small;
		);
	) else if $[ ${System.Request.Reference3} == "-" ] $(
		if $[ 8000 <= ${System.Request.Reference4} ] $(
			entry MJ.point.minus.large;
		) else $(
			entry MJ.point.minus.small;
		);
	);
)
MJ.point.plus.isYakuman: \0\s[5]やっくまーん！\e
MJ.point.plus.hasUradora: \0\s[5]わーい、\_w[500]裏ドラ♪\e
MJ.point.plus.small: \0\s[5]ありがと。\e
MJ.point.plus.small: \0\s[6]見直した？\e
MJ.point.plus.large: \0\s[5]ラッキー♪\e
MJ.point.plus.large: \0\s[1]ごめんね？\e
MJ.point.minus.small: \0\s[8]強いんだね。\e
MJ.point.minus.small: \0\s[4]あちゃー…。\e
MJ.point.minus.large: \0\s[3]ひどーい。\e
MJ.point.minus.large: \0\s[7]むー。\e

#供託とか含めると正確ではないけど簡易的な判定
MJ.isYakuman: $(
	if $[ ${MJ.Save.Jifuhai} == "1z" ] $(
		echo $[ 48000 <= ${System.Request.Reference4} ];
	) else $(
		echo $[ 32000 <= ${System.Request.Reference4} ];
	);
)

MJ.hasUradora: $(
	if $[ ${MJ.Save.Tsumo} != "" ] $(
		setstr @atarihai ${MJ.Save.Tsumo};
	) else if $[ ${MJ.Save.Sutehai} != "" ] $(
		setstr @atarihai ${MJ.Save.Sutehai};
	);
	setstr @tehai ${MJ.Save.Tehai}${@atarihai};
	split @a $(MJ.MakeArrayFromString ${MJ.Save.Uradorahyouji}) ,;
	setstr @r 0;
	setstr @i 0;
	while $[ $@a[${@i}] != "" ] $(
		setstr @dora $(MJ.GetDoraFromDorahyouji $@a[${@i}]);
		if $[ $(match ${@tehai} ${@dora}) >= 0 ] $(
			setstr @r 1;
			break;
		);
		inc @i;
	);
	entry @r;
)

#===========================================================
# haipai 配牌を配る
# Reference2: プレイヤー名
# Reference3: 配牌(ex.1m2m3m4p5p6p7s8s9s1z5z6z7z)
#===========================================================
MJ.haipai: $(
	setstr MJ.Save.Tehai ${System.Request.Reference3};
	setstr MJ.Save.VisiblePai ${MJ.Save.VisiblePai}${System.Request.Reference3};
)

#===========================================================
# dora ドラ表示牌を送る
# Reference2: 牌(ex.7z)
#===========================================================
MJ.dora: $(
	if $[ ${MJ.Save.Status} == "和了" ] $(
		setstr MJ.Save.Uradorahyouji ${MJ.Save.Uradorahyouji}${System.Request.Reference2};
	) else $(
		setstr MJ.Save.Dorahyouji ${MJ.Save.Dorahyouji}${System.Request.Reference2};
		setstr MJ.Save.VisiblePai ${MJ.Save.VisiblePai}${System.Request.Reference2};
	);
)

#===========================================================
# open 手牌を公開する(チー、ポン、カン)
# Reference2: プレイヤー名
# Reference3: 牌(ex.1p2p3p)
#===========================================================
MJ.open: $(
	setstr @h ${System.Request.Reference3};
	if $[ ${System.Request.Reference2} == ${MJ.PlayerName} ] $(
		if $[ ${MJ.Save.Furo.Own} == "chi" ] $(
			setstr @toRemove $(MJ.RemoveHai ${@h} ${MJ.Save.Sutehai});
			setstr MJ.Save.Tehai $(MJ.RemoveHai ${MJ.Save.Tehai} ${@toRemove})<${@h}>;
		) else if $[ ${MJ.Save.Furo.Own} == "pon" ] $(
			setstr @toRemove $(MJ.RemoveHai ${@h} ${MJ.Save.Sutehai});
			setstr MJ.Save.Tehai $(MJ.RemoveHai ${MJ.Save.Tehai} ${@toRemove})<${@h}>;
		) else if $[ ${MJ.Save.Furo.Own} == "kan" ] $(
			if $[ $(length ${@h}) == 2 ] $(
				#加槓
				setstr MJ.Save.Tehai $(MJ.AddHai ${MJ.Save.Tehai} ${MJ.Save.Tsumo});
				setstr MJ.Save.Tehai $(sub ${MJ.Save.Tehai} ${@h}${@h}${@h} ${@h}${@h}${@h}${@h});
				setstr MJ.Save.Tehai $(MJ.RemoveHai ${MJ.Save.Tehai} ${@h});
			) else if $[ ${MJ.Save.Tsumo} != "" ] $(
				#暗槓
				setstr MJ.Save.Tehai $(MJ.AddHai ${MJ.Save.Tehai} ${MJ.Save.Tsumo});
				setstr MJ.Save.Tehai $(MJ.RemoveHai ${MJ.Save.Tehai} ${@h})"("${@h}")";
			) else $(
				#大明槓
				setstr @toRemove $(MJ.RemoveHai ${@h} ${MJ.Save.Sutehai});
				setstr MJ.Save.Tehai $(MJ.RemoveHai ${MJ.Save.Tehai} ${@toRemove})<${@h}>;
			);
		);
		setstr MJ.Save.Furo.Own "";
		setstr MJ.Save.Sutehai "";
	) else $(
		if $[ ${MJ.Save.Furo.Other} == "chi" || ${MJ.Save.Furo.Other} == "pon" ] $(
			setstr @toAdd $(MJ.RemoveHai ${@h} ${MJ.Save.Sutehai});
			setstr MJ.Save.VisiblePai ${MJ.Save.VisiblePai}${@toAdd};
		) else if $[ ${MJ.Save.Furo.Other} == "kan" ] $(
			if $[ $(length ${@h}) == 2 ] $(
				#加槓
				setstr MJ.Save.VisiblePai ${MJ.Save.VisiblePai}${@h};
			) else if $[ $(match ${@h} ${MJ.Save.Sutehai}) == -1 ] $(
				#暗槓
				setstr MJ.Save.VisiblePai ${MJ.Save.VisiblePai}${@h};
			) else $(
				#大明槓
				setstr @toAdd $(MJ.RemoveHai ${@h} ${MJ.Save.Sutehai});
				setstr MJ.Save.VisiblePai ${MJ.Save.VisiblePai}${@toAdd};
			);
		);
		clear MJ.Save.Furo.Other;
	);
	setstr MJ.Save.IsIppatsuChance 0;
)

#===========================================================
# tsumo 自摸
# Reference2: プレイヤー名(自分)
# Reference3: 残り枚数
# Reference4: 牌(ex.7z)
#===========================================================
MJ.tsumo: $(
	setstr MJ.Save.Nokori ${System.Request.Reference3};
	setstr MJ.Save.Tsumo ${System.Request.Reference4};
	setstr MJ.Save.VisiblePai ${MJ.Save.VisiblePai}${System.Request.Reference4};
	if $[ $(match ${System.Request.Status} talking) < 0 ] $(
		entry MJ.tsumo.talk;
	);
)
MJ.tsumo.talk: \0\s[0]\e

#===========================================================
# sutehai 捨牌
# Reference2: プレイヤー名
# Reference3: 牌(ex.7z)
#===========================================================
MJ.sutehai: $(
	setstr @playerName ${System.Request.Reference2};
	setstr @sutehai ${System.Request.Reference3};
	setstr MJ.Save.Sutehai ${@sutehai};
	#誰かリーチしていたら現物を更新
	setstr @i 0;
	while $[ $MJ.Save.Player.Richi[${@i}] != "" ] $(
		if $[ $MJ.Save.Player.Richi[${@i}] ] $(
			setstr @newstr $(sub $MJ.Save.Player.Genbutsu[${@i}] dummy "")${@sutehai};
			setstr MJ.Save.Player.Genbutsu[${@i}] ${@newstr};
		);
		inc @i;
	);
	if $[ ${@playerName} != ${MJ.PlayerName} ] $(
		#他家の捨牌の場合は情報取得に留める
		setstr @newstr $(sub $MJ.Save.Player.Kawa[$(MJ.I ${@playerName})] dummy "")${@sutehai};
		setstr MJ.Save.Player.Kawa[$(MJ.I ${@playerName})] ${@newstr};
		setstr MJ.Save.VisiblePai ${MJ.Save.VisiblePai}${@sutehai};
	) else $(
		#一発判定用
		if $[ ${MJ.Save.Say.Own} == "richi" ] $(
			clear MJ.Save.Say.Own;
			setstr MJ.Save.IsIppatsuChance 1;
		) else $(
			setstr MJ.Save.IsIppatsuChance 0;
		);
		setstr MJ.Save.Kawa ${MJ.Save.Kawa}${@sutehai};
		if $[ ${MJ.Save.Tsumo} == "" ] $(
			#副露後
			setstr MJ.Save.Tehai $(MJ.RemoveHai ${MJ.Save.Tehai} ${@sutehai});
		) else if $[ ${MJ.Save.Tsumo} == ${@sutehai} ] $(
			#ツモ切り
			if $[ $(match ${System.Request.Status} talking) < 0 && $(rand 5) == 0 ] $(
				entry MJ.sutehai.talk.tsumogiri;
			);
		) else $(
			#手出し
			if $[ $(match ${System.Request.Status} talking) < 0 && $(rand 5) == 0 ] $(
				entry MJ.sutehai.talk.tedashi;
			);
			setstr MJ.Save.Tehai $(MJ.AddHai ${MJ.Save.Tehai} ${MJ.Save.Tsumo});
			setstr MJ.Save.Tehai $(MJ.RemoveHai ${MJ.Save.Tehai} ${@sutehai});
		);
	);
	clear MJ.Save.Tsumo;
)
# 他家（ユーザ）に悟られることは自分が不利になること。
# でもゴーストにはそれくらいの「可愛らしさ」があってもよい。
MJ.sutehai.talk.tsumogiri: \0\s[3]…。\e
MJ.sutehai.talk.tedashi: \0\s[5]♪\e

#===========================================================
# sutehai? 捨牌を尋ねる
#===========================================================
MJ.sutehai?: $(
	if $[ ${MJ.Save.Tsumo} != "" ] $(
		setstr @shanten $(MJ.GetShantenYaku $(MJ.AddHai ${MJ.Save.Tehai} ${MJ.Save.Tsumo}) ${MJ.Save.Bafuhai} ${MJ.Save.Jifuhai});
		setstr @dahai "";
		setstr @ankanHai "";
		setstr @kakanHai "";
		if $[ ${@shanten} >= 0 ] $(
			if ${MJ.Save.Richi} $(
				#リーチ済ならツモ切り
				setstr @dahai ${MJ.Save.Tsumo};
			) else $(
				setstr @dahai $(MJ.Naniwokiru ${MJ.Save.Tehai} ${MJ.Save.Tsumo} ${MJ.Save.Kawa} ${MJ.Save.Bafuhai} ${MJ.Save.Jifuhai} ${MJ.Save.Dorahyouji}
					$(join MJ.Save.Player.Richi ,) $(join MJ.Save.Player.Genbutsu ,) ${MJ.Save.VisiblePai});
				setstr @kakanHai $(MJ.GetKakanHaiBest ${MJ.Save.Tehai} ${MJ.Save.Tsumo} ${MJ.Save.Bafuhai} ${MJ.Save.Jifuhai} ${MJ.Save.Nokori} $(join MJ.Save.Player.Richi ,));
			);
			setstr @ankanHai $(MJ.GetAnkanHaiBest ${MJ.Save.Tehai} ${MJ.Save.Tsumo} ${MJ.Save.Richi} ${MJ.Save.Bafuhai} ${MJ.Save.Jifuhai} ${MJ.Save.Nokori} $(join MJ.Save.Player.Richi ,));
		);
		setstr @action "";
		setstr @select "";
		if $[ ${@shanten} == -1 ] $(
			setstr @action tsumo;
			setstr @select "";
		) else if $[ $(MJ.ShouldRichi ${MJ.Save.Tehai} ${@shanten} ${MJ.Save.Richi} ${MJ.Save.Nokori} ${MJ.Save.Tsumo}
				${@dahai} ${MJ.Save.Bafuhai} ${MJ.Save.Jifuhai} ${MJ.Save.Dorahyouji}) ] $(
			setstr @action richi;
			setstr @select ${@dahai};
		) else if $[ ${@ankanHai} != "" ] $(
			setstr @action ankan;
			setstr @select ${@ankanHai};
		) else if $[ ${@kakanHai} != "" ] $(
			setstr @action kakan;
			setstr @select ${@kakanHai};
		) else $(
			setstr @action sutehai;
			setstr @select ${@dahai};
		);
	) else $(
		#副露後
		setstr @dahai $(MJ.Naniwokiru ${MJ.Save.Tehai} "" ${MJ.Save.Kawa} ${MJ.Save.Bafuhai} ${MJ.Save.Jifuhai} ${MJ.Save.Dorahyouji}
			$(join MJ.Save.Player.Richi ,) $(join MJ.Save.Player.Genbutsu ,) ${MJ.Save.VisiblePai});
		setstr @action sutehai;
		setstr @select ${@dahai};
	);
	MJ.SendResponse ${System.Request.Reference1} ${@action} ${@select};
)

#コマンドを送らないことでサーバーに対応を委任する
#MJ.sutehai?: $(
#	MJ.SendResponse ${System.Request.Reference1} "";
#)

#===========================================================
# naku? 牌を鳴くか尋ねる。クライアントが可能なコマンドも送る
# Reference2: (ron|kan|pon|chi)
# Reference3: 以降、Reference2同様
#===========================================================
MJ.naku?: $(
	setstr @action "";
	setstr @i 2;
	while $[ ${System.Request.Reference${@i}} != "" ] $(
		if $[ ${System.Request.Reference${@i}} == "ron" ] $(
			setstr @action ron;
			break;
		);
		if $[ ${System.Request.Reference${@i}} == "kan" ] $(
			if $(MJ.ShouldDaiminkan ${MJ.Save.Tehai} ${MJ.Save.Sutehai} ${MJ.Save.Bafuhai} ${MJ.Save.Jifuhai} $(join MJ.Save.Player.Richi ,)) $(
				setstr @action kan;
				break;
			);
		);
		if $[ ${System.Request.Reference${@i}} == "pon" ] $(
			if $(MJ.ShouldPon ${MJ.Save.Tehai} ${MJ.Save.Sutehai} ${MJ.Save.Bafuhai} ${MJ.Save.Jifuhai} $(join MJ.Save.Player.Richi ,)) $(
				setstr @action pon;
				break;
			);
		);
		if $[ ${System.Request.Reference${@i}} == "chi" ] $(
			setstr @cm $(MJ.GetChiMaterialBest ${MJ.Save.Tehai} ${MJ.Save.Sutehai} ${MJ.Save.Bafuhai} ${MJ.Save.Jifuhai} $(join MJ.Save.Player.Richi ,));
			if $[ ${@cm} != "" ] $(
				split @am $(MJ.MakeArrayFromString ${@cm}) ,;
				setstr @action chi;
				setstr @h1 $@am[0];
				setstr @h2 $@am[1];
				break;
			);
		);
		inc @i;
	);
	if $[ ${@action} == ""] $(
		setstr @action no;
	);
	MJ.SendResponse ${System.Request.Reference1} ${@action} ${@h1} ${@h2};
)

#コマンドを送らないことでサーバーに対応を委任する
#MJ.naku?: $(
#	MJ.SendResponse ${System.Request.Reference1} "";
#)

#===========================================================
# tenpai? テンパイを宣言するか尋ねる
#===========================================================
MJ.tenpai?: $(
	setstr @action "";
	if $(MJ.ShouldSayTenpai ${MJ.Save.Bafuhai} ${MJ.Save.Jifuhai} ${MJ.Save.Kyoku} ${MJ.Save.Richi} $(MJ.GetLeadPoint)) $(
		setstr @action yes;
	) else $(
		setstr @action no;
	);
	MJ.SendResponse ${System.Request.Reference1} ${@action};
)

#コマンドを送らないことでサーバーに対応を委任する
#MJ.tenpai?: $(
#	MJ.SendResponse ${System.Request.Reference1} "";
#)

#===========================================================
# say 発声
# Reference2: プレイヤー名
# Reference3: (chi|pon|kan|ron|tsumo|richi|tenpai|noten)
#===========================================================
MJ.say: $(
	setstr @playerName ${System.Request.Reference2};
	setstr @word ${System.Request.Reference3};
	if $[ ${@playerName} == ${MJ.PlayerName} ] $(
		if $[ ${@word} == "chi" ] $(
			setstr @say "\s[0]チー";
			setstr @aqtk "ち'ー";
			setstr MJ.Save.Furo.Own chi;
		) else if $[ ${@word} == "pon" ] $(
			setstr @say "\s[0]ポン";
			setstr @aqtk "ぽ'ん";
			setstr MJ.Save.Furo.Own pon;
		) else if $[ ${@word} == "kan" ] $(
			setstr @say "\s[0]カン";
			setstr @aqtk "か'ん";
			setstr MJ.Save.Furo.Own kan;
		) else if $[ ${@word} == "ron" ] $(
			setstr @say "\s[5]ロン";
			setstr @aqtk "ろ'ん";
		) else if $[ ${@word} == "tsumo" ] $(
			if ${MJ.Save.IsIppatsuChance} $(
				setstr @say "\s[5]一発ツモ！";
			) else $(
				setstr @say "\s[5]ツモ";
			);
			setstr @aqtk "つ'も";
		) else if $[ ${@word} == "richi" ] $(
			if $[ $(find MJ.Save.Player.Richi 1) >= 0 ] $(
				setstr @say "\s[5]追っかけリーチ！";
			) else $(
				setstr @say "\s[6]リーチ";
			);
			setstr @aqtk "り'ーち";
			setstr MJ.Save.Richi 1;
		) else if $[ ${@word} == "tenpai" ] $(
			setstr @say "\s[5]テンパイ";
			setstr @aqtk "て'んぱい";
		) else if $[ ${@word} == "noten" ] $(
			setstr @say "\s[3]ノーテン";
			setstr @aqtk "の'ーてん";
		);
		setstr MJ.Save.Say.Own ${@word};
		echo \0${@say}\e;
		if ${MJ.IsSoundEnabled} $(
			callsaori aqtk PLAYASYNC ${@aqtk};
		);
	) else $(
		if $[ ${@word} == "chi" || ${@word} == "pon" || ${@word} == "kan" ] $(
			setstr MJ.Save.Furo.Other ${@word};
		) else if $[ ${@word} == "richi" ] $(
			entry MJ.say.talk.other.richi;
			setstr MJ.Save.Player.Richi[$(MJ.I ${@playerName})] 1;
			setstr MJ.Save.Player.Genbutsu[$(MJ.I ${@playerName})] $MJ.Save.Player.Kawa[$(MJ.I ${@playerName})];
		);
	);
)
MJ.say.talk.other.richi: \0\s[0]\w9\w9\s[2]ふええ。\e

#===========================================================
# agari あがり
# Reference2: プレイヤー名
# Reference3: 符
# Reference4: 役,ハン数
# Reference5: 以降、Reference4同様
#===========================================================
MJ.agari: $(
	setstr MJ.Save.Status 和了;
)

#===========================================================
# ryukyoku 流局
#===========================================================
MJ.ryukyoku: $(
	setstr MJ.Save.Status 流局;
)

#===========================================================
# utility
#===========================================================
=kis
function MJ.SendResponse $(
	if $(MJ.IsSSTP) $(
		setstr System.Response.X-SSTP-PassThru-ID ${MJ.ResponseEventID};
		setstr System.Response.X-SSTP-PassThru-Reference0 ${MJ.Version};
		setstr @i 1;
		while $[ $@arg[${@i}] != "" ] $(
			setstr System.Response.X-SSTP-PassThru-Reference${@i} $@arg[${@i}];
			inc @i;
		);
		return "";
	) else $(
		setstr @i 1;
		while $[ $@arg[${@i}] != "" ] $(
			adddictstr @a $@arg[${@i}];
			inc @i;
		);
		return \![raiseother,${System.Request.Sender},${MJ.ResponseEventID},${MJ.Version},$(join @a ,)]\e;
	);
);

function MJ.IsSSTP $(
	split @sendertype ${System.Request.SenderType} ,;
	return $[ $(find @sendertype sstp) >= 0 ];
);

function MJ.GetLeadPoint $(
	setstr @secondscore -100000;
	setstr @i 0;
	while $[ $MJ.Save.Player.Score[${@i}] != "" ] $(
		if $[ ${@i} != $(MJ.B ${MJ.PlayerName}) && $MJ.Save.Player.Score[${@i}] > ${@secondScore} ] $(
			setstr @secondScore $MJ.Save.Player.Score[${@i}];
		);
		inc @i;
	);
	return $[ $MJ.Save.Player.Score[$(MJ.B ${MJ.PlayerName})] - ${@secondScore} ];
);

function MJ.GetBafuhai $(
	setstr @bafu $@arg[1];
	if $[ ${@bafu} == "東" ] $(
		return 1z;
	) else if $[ ${@bafu} == "南" ] $(
		return 2z;
	);
	return "";
);

function MJ.GetJifuhai $(
	setstr @oyaname $@arg[1];
	setstr @oya -1;
	setstr @self -1;
	setstr @i 0;
	while $[ $MJ.Save.PlayerName[${@i}] != "" ] $(
		if $[ $MJ.Save.PlayerName[${@i}] == ${@oyaname} ] $(
			setstr @oya ${@i};
		);
		if $[ $MJ.Save.PlayerName[${@i}] == ${MJ.PlayerName} ] $(
			setstr @self ${@i};
		);
		inc @i;
	);
	setstr @n $[ (4 + ${@self} - ${@oya}) % 4 + 1 ];
	return ${@n}z;
);

#MJ.Save.PlayerNameを東家から並べ直したものを得る
function MJ.GetPlayers $(
	setstr @oyaname $@arg[1];
	setstr @findoya 0;
	setstr @i 0;
	while $[ $(size @r) < 4 ] $(
		if $[ $MJ.Save.PlayerName[${@i}] == ${@oyaname} ] $(
			setstr @findoya 1;
		);
		if ${@findoya} $(
			adddictstr @r $MJ.Save.PlayerName[${@i}];
		);
		setstr @i $[ (${@i} + 1) % 4 ];
	);
	return $(join @r ,);
);

#ゲーム開始時席順index
function MJ.B $(
	return $(find MJ.Save.PlayerName $@arg[1]);
);

#東家からのindex
function MJ.I $(
	return $(find MJ.Save.Players $@arg[1]);
);
=end

#===========================================================
# Sound
#===========================================================
MJ.SoundDefault: 1
MJ.IsSoundEnabled: $(
	if $[ ${MJ.Sound} != "" ] $(
		entry MJ.Sound;
	) else $(
		echo ${MJ.SoundDefault};
	);
)
sys.key.m: $(
	if $[ ${MJ.Sound} == "" ] $(
		setstr MJ.Sound $[ !${MJ.SoundDefault} ];
	) else $(
		setstr MJ.Sound $[ !${MJ.Sound} ];
	);
	if ${MJ.Sound} $(
		echo \0\_qSound: ON\_q\e;
	) else $(
		echo \0\_qSound: OFF\_q\e;
	);
)
